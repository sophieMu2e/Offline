#!/usr/bin/perl -w
#
# Usage:
#
#     cat hits.txt | fe-i4-trigger-generator  preScaleNumerator preScaleDenominator
#
# Andrei Gaponenko, 2013

use strict;
use Getopt::Long;

# 
my $deBuncherPeriod = 68;  # number of BX per microbunch cycle
#my $inTimeStart = 0; # mod period
my $inTimeEnd = 8; # mod period

my $earlyMargin = 1; # start readout 1 BX earlier than the hit
my $lateMargin = 1; #	don't start new readout for a hit later than that

my $minTrigSpacing = 7;

sub usage() {
    print "Usage:\n\tcat hits.txt|$0 [--earlyMargin=N] [--lateMargin=M] [--minTrigSpacing=L] preScaleNumerator preScaleDenominator\n";
    exit 0;
}

sub trigger($) {
    my ($bx) = @_;
    print "TRIG $bx\n" unless $bx < 0;
}

GetOptions("earlyMargin=i" => \$earlyMargin, "lateMargin=i" => \$lateMargin, "minTrigSpacing=i" => \$minTrigSpacing);

die usage() unless $#ARGV == 1;

my $preScaleNumerator = $ARGV[0];
my $preScaleDenominator = $ARGV[1];

die "ERROR: the numerator should be a positive integer, got $preScaleNumerator\n" unless ($preScaleNumerator =~ /^\d+$/)&&($preScaleNumerator > 0);
die "ERROR: the denominator should be a positive integer, got $preScaleDenominator\n" unless ($preScaleDenominator =~ /^\d+$/)&&($preScaleDenominator > 0);
die "ERROR: num > denom does not make sense\n" if ($preScaleNumerator > $preScaleDenominator);

my $lastTriggeredBX = -1000;
my $lastBX = -1;
my $numHits = 0;
while(my $line = <STDIN>) {
    # print "got line = $line";
    if($line =~ /^BX\s+(\d+)$/) {
	if($numHits) { # lastBX was non-empty

	    my $cycle = $lastBX / $deBuncherPeriod;
	    my $reducedTime =  $lastBX % $deBuncherPeriod;
	    my $inTime =  ($reducedTime <= $inTimeEnd) ? 1 : 0;

	    my $acceptCycle = (($cycle % $preScaleDenominator) < $preScaleNumerator) ? 1 : 0;
	    
	    if($acceptCycle || !$inTime) {
		# Want to trigger on a hit in $lastBX.
		my $desiredTriggerTime = $lastBX - $earlyMargin;

		# But is the chip ready?
		my $earliestAllowedTime = $lastTriggeredBX + $minTrigSpacing;

		if($desiredTriggerTime < $earliestAllowedTime) {
		    # No, can't do that.  Do we want to trigger a bit later?
		    if($earliestAllowedTime <= $lastBX + $lateMargin) {
			#print "TRIG $earliestAllowedTime  DELAYED\n";
			trigger($earliestAllowedTime);
			$lastTriggeredBX = $earliestAllowedTime;
		    }
		}
		else {
		    trigger($desiredTriggerTime);
		    $lastTriggeredBX = $desiredTriggerTime;
		}
	    }
	}

	$numHits = 0;
	$lastBX = $1;
    }
    else { # this is a data line
	++$numHits;
    }
}

#print "OK\n";
