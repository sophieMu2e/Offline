#include "KalmanTests/fcl/KalDiag.fcl"
#include "JobConfig/cd3/beam/beam_g4s4_conversion.fcl" 
# Mostly use what was done in the above, except...

# ...change the process name
process_name: IpaSimsConversion

# ...change the output file names
services.TFileService.fileName: "nts.ipa-sims-conversion.root"
outputs.detectorOutput.fileName: "sim.ipa-sims-conversion.detOutput.art"
outputs.crvOutput.fileName: "sim.ipa-sims-conversion.detOutput.art"
outputs.truncatedEvtsOutput.fileName: "sim.ipa-sims-conversion.truncatedOutput.art"

# ...add the new TrkPatRec module, but...
# ...first, need the BTrkHelper service
services.BTrkHelper : @local::BTrkHelperDefault
# ...second, need to be able to add times due to the primary protons and the stopped muons
physics.producers.protonTimeMap: { module_type : GenerateProtonTimes }
physics.producers.muonTimeMap: { module_type : GenerateMuonLife }

# ...third, need to add the Tracking.producers so we can call them later
physics.producers : { @table::physics.producers  @table::Tracking.producers }
physics.producers.makeSH.diagLevel : 3
physics.producers.TRFDeM.diagLevel : 3
physics.producers.TRFDeM.KalDiag : { MCPtrLabel : "makeSH" 
					      	  MCStepsLabel : "g4run"
						  SimParticleLabel : "g4run"
						  SimParticleInstance : ""
						  StrawHitMCLabel : "makeSH"
						  TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
						  diagLevel : 3
						}

physics.analyzers.RKFDeM: {
         module_type: ReadKalFits
	 fitterModuleLabel: TRFDeM
	 KalDiag : { MCPtrLabel : "makeSH" 
	 	     MCStepsLabel : "g4run"
		     SimParticleLabel : "g4run"
		     SimParticleInstance : ""
		     StrawHitMCLabel : "makeSH"
		     TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
		     diagLevel : 3
		   }

	 diagLevel : 1 # track-level diagnostics.  For detailed (hit-level) diagnostics use diagLevel : 2
      }

# ...now we can add everything to the detPath
physics.myPath : [ generate, genCounter, g4run, g4consistent, protonTimeMap, muonTimeMap, @sequence::Tracking.DigiSim, @sequence::Tracking.TPRDeM ]
physics.trigger_paths : [ myPath ]

# ...add any analyzer modules we want...
physics.analyzers.dumpGen : { module_type : GenParticlesAnalyzer
			      inputs : "generate"
			    }

# ...and append them to the end_paths
physics.extrapaths : [ dumpGen, RKFDeM ]
physics.end_paths : [ extrapaths ]