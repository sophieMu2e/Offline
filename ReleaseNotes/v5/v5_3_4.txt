           Release notes for Mu2e Offline software, v5_3_4

13) June 11, 2015 - ehrlich
    CRV - D2/D3 were changed to half modules

12) June 9, 2015 - brownd
    -Added the ability to change KalFit hit weeding per iteration, and
    propagated this to prolog.fcl
    -Updated parameters for panel ambiguity resolution
    -Added explicit configurations for doublet and panel-based configurations
    -Made panel-based ambiguity resolution the default for TPRDownstreameMinus
    and other species-specific fits

11) June 8, 2015 - kutschke
    Edited setup.sh to require version 619 of the BaBar code.
    This brings in the new header files needed to build for BtrkHelper
    but it does not change any behaviour of the BaBar code.

    Also restore BtrkHelper to the build by restoring the SConscript file.
      setup.sh
      BtrkHelper/src/SConscript


10) May 30, 2015 - ehrlich
    Updated CRVResponse code
    -bug fixes
    -Parameter settings are now in CRVResponse/test/prolog.fcl
    -PE yield was adjusted to agree with the TDR requirement
    -SiPM response parameters adjusted to SiPM specs

9) May 29, 2015 - kutschke
   Update to item 8.
   Took BtrkHelper out of the build by renaming BtrkHelper/src/SConscript to
   SConscript.sav.

   The reason is that it needs headers from BaBar version 621 while setup.sh
   asks for version 618.

   This changes the test driving instructions to:
     1) Update the Babar code to version 621.
     2) mv BtrkHelper/src/SConscript.sav BtrkHelper/src/SConscript
     3) scons -j 8
     4) Configure the BtrkHelper service in your job.


8) May 29, 2015 - kutschke
   Updated the BaBar code so that it no longer needs to include headers
   from Offline or link to libraries in Offline.  The changes are in two parts, described below.

   I have NOT updated setup.sh to require the newly committed BaBar code.  The new Mu2e code
   does will not be included in a running job unless you add the new service to your fcl file.

   To test drive the new code:
     1) Update the Babar code to version 621.
     2) Configure the BtrkHelper service in your job.
   If you do one but not the other you will get an error.

   In the BaBar code:
     a) Define two new pure virtual interface classes
          BaBar/include/FileFinderInterface.hh
          BaBar/include/ParticleInfoInterface.hh
        Mu2e code will define subclasses that derive from these interfaces
        and will instantiate a copy of each.
     b) Define a singleton-like class that holds a non-owning pointer to
        the concrete instances provided by the Mu2e code.
           BaBar/include/ExternalInfo.hh
           BaBar/src/ExternalInfo.cc
        This singleton returns access to the concrete classes via reference
        or pointer to the base class.  So no BaBar code depends on the
        concrete clases, only on the interfaces.
     c) The following classes now get information via ExternalInfo rather
        than by using mu2e::GlobalConstantsHandle or ConfigFileLookupPolicy
           MatEnv/src/MatElmDictionary.cc
           MatEnv/src/MatIsoDictionary.cc
           MatEnv/src/MatMtrDictionary.cc
     d) The three *Dictionary.cc files used to have the names of the files
        that they read hard coded.  They are not fcl parameters of the
        new Mu2e service described next - see item c), below.
   In the Mu2e code:
     a) Define concrete subclasses of the two interfaces:
         BtrkHelper/inc/FileFinder.hh
         BtrkHelper/inc/ParticleInfo.hh
         BtrkHelper/src/FileFinder.cc
         BtrkHelper/src/ParticleInfo.cc
     b) Define an new service that owns instances of the concrete
        classes named in a)
          BtrkHelper/inc/BtrkHelper.hh
          BtrkHelper/src/BtrkHelper_service.cc
     c) Define a prolog with the correct default configuration of the
        new service:
           BtrkHelper/fcl/prolog.fcl
        The definitions of the BaBar material model Dictionary files are in here.
     d) Include the new prolog in standardProducers.
          fcl/standardServices.fcl


7) May 23, 2015 - brownd
    Introduced new functionality to model fluctuations in the primary proton
    microbunch intensity.  There are 3 components:
      -ProtonBunchIntensitySimulator_module generates a single event object of type
      ProtonBunchIntensity, which records the # of protons for this particular
      microbunch, and the mean value of the distributrion from which this
      value was sampled.  Currently only 2 models are supported; a constant
      value of intensity, and a flat distribtion chacterized by a mean value
      and a width.
      -ProtonBunchIntensitySummarizer_module reads all the
      ProtonBunchIntensity objects in the event, makes sure they are
      consistent, and then summarizes them into an EventWeight object.  This
      object MUST be used as weight for any downstream analysis which depends
      on stopped muons (i.e. conversion electrons, DIO, ...) to get correct
      results.
      -2 Modifications to MixMCEvents.  The first is for when MixMCEvents is
      used to simulate mixing many individual events from several primary process
      background frames into the primary event, so that the the number of individual process
      background frame events mixed into the primary event scales with the
      number of protons.  This mode is used when running mixing inline with
      signals (very inefficient), or when creating pre-mixed complete
      background frame events.  This change requires interpreting the mean value
      given to this module configuration as the probability of producing a
      non-empty event from this process per incident proton.  The other change
      is for when MixMCEvents is used to mix the single pre-mixed background
      frame event into the primary event.  In that mode, each individual mixer
      module instance for each process will find the ProtonBunchIntensity
      object in the 2ndary event, and copy that into the primary event.  These
      are the ProtonBunchIntensity objects
6) May 19, 2015 - ehrlich
   Updated the code in CRVResponse (bug fixes, faster simulation, better simulation of the
   Cerenkov photons). New lookupt tables are now in
   /mu2e/data/outstage/ehrlich/CRVLookupTables/LookupTable


5) May 14, 2015 - youzy
   Add comments for pbar absorbers, remove a test piece of pbar absorber in TS2
   modified:
     Mu2eG4/geom/TransportSolenoid_v01.txt
     Mu2eG4/src/constructTS.cc

1.  David Norvil Brown (Louisville), 6 May 2015.  Code cleanup in several files in
    ExternalShieldingGeom package to remove some old debugging couts and to enable
    reading in several parameters as vectors instead of one value at a time.
    The latter will shrink the text description files and hopefully make them
    more readable.  Also removed the floor of the downstream endcap shielding per
    request from the CRV.

2.  David Norvil Brown (Louisville), 6 May 2015.  Complete removal of old
    ExternalNeutronShieldingGeom package and mentions thereof in Mu2e code.

3.  David Norvil Brown (Louisville), 6 May 2015.  Add DS saddles.

4.  David Norvil Brown (Louisville), 12 May 2015.  Change protonabsorber
    material entirely to HDPE.

5.  David Norvil Brown (Louisville), 15,18 May 2015:  Change name of
    InternalNeutronAbsorber4 to TSdA.  Make it HDPE.  Move it into
    BeamlineGeom package.
    Remove all traces of InternalNeutronAbsorber package.
    Add an external shielding piece to fill a gap at the DS endcap shielding
    interface.  Add rings to DS, put in basics of code for DS rails.

6.  David Norvil Brown (Louisville), 26 May 2015:  Add DS Stand and saddle
    under calorimeter region.  Add plates on DS stand.  Add rails in DS.

7.  David Norvil Brown (Louisville), 15 June 2015:  Move Stopping Target
    monitor downstream by 10 meters.  Add Shielding roof support block
    and notch existing roof blocks.  After consultation with CRV and MSTM
    groups, make MSTM not build by default until later time when a more
    realistic design exists.

